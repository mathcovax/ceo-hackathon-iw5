// Generated by @duplojs/types-codegen
/* eslint-disable */
/* prettier-ignore */
/* istanbul ignore file */
/* v8 ignore start */
// noinspection JSUnusedGlobalSymbols
// @ts-nocheck
type SubmissionField = {
    type: "text";
    name: string;
    require: boolean;
} | {
    type: "textarea";
    name: string;
    require: boolean;
} | {
    type: "number";
    name: string;
    require: boolean;
} | {
    type: "date";
    name: string;
    require: boolean;
} | {
    type: "url";
    name: string;
    require: boolean;
} | {
    type: "file";
    name: string;
    require: boolean;
    fileTypes: FileTypeEnum[];
} | {
    type: "selectText";
    name: string;
    require: boolean;
    values: string[];
};

export { SubmissionField };

type FileTypeEnum = "pdf" | "image" | "text" | "csv" | "any";

export { FileTypeEnum };

type PrestationSheet = {
    id: string;
    mode: PrestationSheetMode;
    status: "disabled" | "available";
    name: string;
    description: string;
    keywords: {
        value: string;
    }[];
    submissionFields: SubmissionField[];
};

export { PrestationSheet };

type PrestationSheetMode = "ai" | "human";

export { PrestationSheetMode };

type SubmissionData = Partial<Record<string, ({
    type: "text";
    value: string;
} | {
    type: "textarea";
    value: string;
} | {
    type: "number";
    value: number;
} | {
    type: "date";
    value: Date;
} | {
    type: "url";
    value: string;
} | {
    type: "file";
    value: string | null;
} | {
    type: "selectText";
    value: string;
}) | undefined>>;

export { SubmissionData };

type AllPrestation = {
    id: string;
    prestationSheetId: string;
    submissionData: SubmissionData;
    status: "created" | "inProgress" | "completed";
} | AIPrestation;

export { AllPrestation };

type AIPrestation = {
    id: string;
    prestationSheetId: string;
    submissionData: SubmissionData;
    status: "created" | "inProgress" | "completed";
    token: string;
};

export { AIPrestation };

interface CodegenReceiveFormData<GenericValue extends Record<string, string | string[] | number | number[] | Date | Date[] | File[]>> {
    extractor: (...args: any[]) => Promise<GenericValue>;
}

export { CodegenReceiveFormData };

type PrestationResult = {
    id: string;
    prestationId: string;
    data: ({
        type: "text";
        value: string;
    } | {
        type: "file";
        value: string;
    })[];
};

export { PrestationResult };

type CodegenRoutes = ({
    method: "POST";
    path: "/create-prestation-sheet";
    body: {
        name: string;
        description: string;
        keywords: {
            value: string;
        }[];
        submissionFields: SubmissionField[];
    } & ({
        mode: "human";
    } | {
        mode: "ai";
        aIAgent: {
            pingUrl: string;
            tokenKey: string;
            entryPointUrl: string;
        };
    });
    response: {
        code: 400;
        information: "AIAgent.isMissing";
        body?: undefined;
    } | {
        code: 400;
        information: "AIAgent.unavaible";
        body?: undefined;
    } | {
        code: 200;
        information: "prestationSheet.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/update-prestation-sheet-description-fields";
    body: {
        name: string;
        description: string;
        keywords: {
            value: string;
        }[];
        prestationSheetId: string;
    };
    response: {
        code: 404;
        information: "prestationSheet.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestationSheet.updated";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/available-prestationsheet-status";
    body: {
        prestationSheetId: string;
    };
    response: {
        code: 404;
        information: "prestationSheet.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestationSheet-status.updated";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/disable-prestationsheet-status";
    body: {
        prestationSheetId: string;
    };
    response: {
        code: 404;
        information: "prestationSheet.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestationSheet-status.updated";
        body?: undefined;
    };
}) | ({
    method: "GET";
    path: "/find-all-prestation-sheet";
    response: {
        code: 200;
        information: "prestationSheetList.found";
        body: PrestationSheet[];
    };
}) | ({
    method: "POST";
    path: "/find-one-prestation-sheet";
    body: {
        prestationSheetId: string;
    };
    response: {
        code: 404;
        information: "prestationSheet.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestationSheet.found";
        body: PrestationSheet;
    };
}) | ({
    method: "POST";
    path: "/update-ai-agent";
    body: {
        aiAgentId: string;
        tokenKey: string;
        pingUrl: string;
        entryPointUrl: string;
    };
    response: {
        code: 404;
        information: "aiAgent.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "aiAgent.updated";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/create-prestation/{prestationSheetId}";
    body?: SubmissionData | undefined;
    params: {
        prestationSheetId: string;
    };
    response: {
        code: 404;
        information: "prestationSheet.notfound";
        body?: undefined;
    } | {
        code: 503;
        information: "prestation.failedCheckAIAgentAvailability";
        body?: undefined;
    } | {
        code: 422;
        information: "prestation.extraField";
        body?: undefined;
    } | {
        code: 422;
        information: "prestation.fieldTypeIncompatible";
        body?: undefined;
    } | {
        code: 422;
        information: "prestation.missingField";
        body?: undefined;
    } | {
        code: 200;
        information: "prestation.created";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/find-all-prestation-by-prestation-sheet";
    body: {
        prestationSheetId: string;
    };
    response: {
        code: 404;
        information: "prestationSheet.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestationList.found";
        body: AllPrestation[];
    };
}) | ({
    method: "POST";
    path: "/ai-start-prestation";
    body: {
        aIPrestationToken: string;
    };
    response: {
        code: 404;
        information: "aIPrestationToken.invalid";
        body?: undefined;
    } | {
        code: 404;
        information: "prestation.notfound";
        body?: undefined;
    } | {
        code: 500;
        information: "prestation.errorWhileStarting";
        body?: undefined;
    } | {
        code: 200;
        information: "prestation.start";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/ai-complete-prestation";
    body: CodegenReceiveFormData<{
        resultFiles: File[];
        resultText?: (string[] | string) | undefined;
    }>;
    query: {
        aIPrestationToken: string;
    };
    response: {
        code: 404;
        information: "aIPrestationToken.invalid";
        body?: undefined;
    } | {
        code: 404;
        information: "prestation.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestation.completed";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/start-prestation";
    body: {
        prestationId: string;
    };
    response: {
        code: 404;
        information: "prestation.notfound";
        body?: undefined;
    } | {
        code: 500;
        information: "prestation.errorWhileStarting";
        body?: undefined;
    } | {
        code: 200;
        information: "prestation.start";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/complete-prestation/{prestationId}";
    body: CodegenReceiveFormData<{
        resultFiles: File[];
        resultText?: (string[] | string) | undefined;
    }>;
    params: {
        prestationId: string;
    };
    response: {
        code: 404;
        information: "prestation.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestation.completed";
        body?: undefined;
    };
}) | ({
    method: "POST";
    path: "/find-one-prestation";
    body: {
        prestationId: string;
    };
    response: {
        code: 404;
        information: "prestation.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestation.found";
        body: AllPrestation;
    };
}) | ({
    method: "POST";
    path: "/find-one-prestation-result-by-prestation";
    body: {
        prestationId: string;
    };
    response: {
        code: 404;
        information: "prestation.notfound";
        body?: undefined;
    } | {
        code: 404;
        information: "prestationResult.notfound";
        body?: undefined;
    } | {
        code: 200;
        information: "prestationResult.found";
        body: PrestationResult;
    };
});

export { CodegenRoutes };
/* v8 ignore stop */
